@* MudanzaApp/Components/Shared/QRCodeComponent.razor *@
@inject IJSRuntime JSRuntime
@inject IStringLocalizer<SharedResource> L

<div class="w-full px-4 py-2">
    @if (IsGenerating)
    {
        <div class="text-center">
            <div class="inline-block animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-primary-600 mx-auto"></div>
            <p class="mt-2 text-sm text-gray-600 dark:text-gray-400">@L["GeneratingQRCode"]</p>
        </div>
    }
    else if (HasError)
    {
        <div class="text-center">
            <div class="rounded-md bg-red-50 dark:bg-red-900/30 p-4">
                <div class="flex">
                    <div class="flex-shrink-0">
                        <svg class="h-5 w-5 text-red-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                        </svg>
                    </div>
                    <div class="ml-3">
                        <p class="text-sm font-medium text-red-800 dark:text-red-200">
                            @L["ErrorGeneratingQRCode"]
                        </p>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="qr-content text-center">
            <canvas id="@CanvasId" class="rounded-lg mx-auto max-w-full"></canvas>
            @if (!string.IsNullOrEmpty(Text))
            {
                <div class="mt-3">
                    <button type="button"
                            @onclick="CopyToClipboard"
                            class="inline-flex items-center px-3 py-1.5 border border-gray-300 dark:border-gray-600 shadow-sm text-sm font-medium rounded-md text-gray-700 dark:text-gray-200 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500">
                        <svg class="-ml-1 mr-2 h-4 w-4 text-gray-400" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                            <path d="M8 3a1 1 0 011-1h2a1 1 0 110 2H9a1 1 0 01-1-1z" />
                            <path d="M6 3a2 2 0 00-2 2v11a2 2 0 002 2h8a2 2 0 002-2V5a2 2 0 00-2-2 3 3 0 01-3 3H9a3 3 0 01-3-3z" />
                        </svg>
                        @L["CopyLink"]
                    </button>
                </div>
            }
        </div>
    }
</div>

@code {
    [Parameter] public string Text { get; set; }
    [Parameter] public EventCallback<bool> OnGenerated { get; set; }
    [Parameter] public EventCallback<bool> OnCopied { get; set; }

    private string CanvasId = $"qrcode_{Guid.NewGuid().ToString("N")}";
    private bool IsGenerating = true;
    private bool HasError = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender || !string.IsNullOrEmpty(Text))
        {
            await GenerateQRCode();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(Text))
        {
            await GenerateQRCode();
        }
    }

    private async Task GenerateQRCode()
    {
        if (string.IsNullOrEmpty(Text))
        {
            HasError = true;
            IsGenerating = false;
            await OnGenerated.InvokeAsync(false);
            return;
        }

        try
        {
            IsGenerating = true;
            HasError = false;
            StateHasChanged();

            // Dar tiempo para que el canvas se renderice
            await Task.Delay(100);

            // Llamar a la función JavaScript para generar el código QR
            var result = await JSRuntime.InvokeAsync<bool>("generateQRCode", CanvasId, Text);

            if (!result)
            {
                HasError = true;
            }

            await OnGenerated.InvokeAsync(!HasError);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error generating QR code: {ex.Message}");
            HasError = true;
            await OnGenerated.InvokeAsync(false);
        }
        finally
        {
            IsGenerating = false;
            StateHasChanged();
        }
    }

    private async Task CopyToClipboard()
    {
        if (string.IsNullOrEmpty(Text))
            return;

        try
        {
            var result = await JSRuntime.InvokeAsync<bool>("copyToClipboard", Text);
            await OnCopied.InvokeAsync(result);
        }
        catch (Exception ex)
        {
            Console.Error.WriteLine($"Error copying to clipboard: {ex.Message}");
            await OnCopied.InvokeAsync(false);
        }
    }
}