@* MudanzaApp/Components/Mudanza/AddItemModal.razor *@
@inject IMudanzaService MudanzaService
@inject IStorageService StorageService
@inject IOpenAIService OpenAIService
@inject IPhotoCreditService PhotoCreditService
@inject IStringLocalizer<SharedResource> L
@inject IToastService ToastService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<div id="addItemModal" class="fixed inset-0 overflow-y-auto hidden" aria-labelledby="modal-title" role="dialog" aria-modal="true">
    <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
        <!-- Background overlay -->
        <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true"></div>

        <!-- Modal panel -->
        <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>
        <div class="inline-block align-bottom bg-white dark:bg-gray-800 rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full">
            <div class="bg-white dark:bg-gray-800 px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
                <div class="sm:flex sm:items-start">
                    <div class="mt-3 text-center sm:mt-0 sm:ml-4 sm:text-left w-full">
                        <h3 class="text-lg leading-6 font-medium text-gray-900 dark:text-white" id="modal-title">
                            @L["AddItem"]
                        </h3>

                        @if (isLoading)
                        {
                            <div class="flex justify-center my-8">
                                <div class="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-primary-600"></div>
                                <p class="ml-3 text-gray-600 dark:text-gray-300">@loadingMessage</p>
                            </div>
                        }
                        else
                        {
                            <div class="mt-4">
                                <div class="space-y-6">
                                    <!-- Item Name -->
                                    <div>
                                        <label for="item-name" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                                            @L["ItemName"] <span class="text-red-500">*</span>
                                        </label>
                                        <div class="mt-1">
                                            <input type="text"
                                                   id="item-name"
                                                   @bind="newItem.Name"
                                                   class="shadow-sm focus:ring-primary-500 focus:border-primary-500 block w-full sm:text-sm border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md"
                                                   placeholder="@L["ItemNamePlaceholder"]"
                                                   required />
                                        </div>
                                    </div>

                                    <!-- Category -->
                                    <div>
                                        <label for="category" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                                            @L["Category"]
                                        </label>
                                        <div class="mt-1">
                                            <select id="category"
                                                    @bind="newItem.Category"
                                                    class="shadow-sm focus:ring-primary-500 focus:border-primary-500 block w-full sm:text-sm border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md">
                                                <option value="Furniture">@L["Category_Furniture"]</option>
                                                <option value="Electronics">@L["Category_Electronics"]</option>
                                                <option value="Kitchen">@L["Category_Kitchen"]</option>
                                                <option value="Clothing">@L["Category_Clothing"]</option>
                                                <option value="Decoration">@L["Category_Decoration"]</option>
                                                <option value="Books">@L["Category_Books"]</option>
                                                <option value="Tools">@L["Category_Tools"]</option>
                                                <option value="Other">@L["Category_Other"]</option>
                                            </select>
                                        </div>
                                    </div>

                                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                                        <div>
                                            <!-- Quantity -->
                                            <div class="mb-4">
                                                <label for="quantity" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                                                    @L["Quantity"] <span class="text-red-500">*</span>
                                                </label>
                                                <div class="mt-1">
                                                    <input type="number"
                                                           id="quantity"
                                                           @bind="newItem.Quantity"
                                                           min="1"
                                                           class="shadow-sm focus:ring-primary-500 focus:border-primary-500 block w-full sm:text-sm border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md" />
                                                </div>
                                            </div>

                                            <!-- Checkboxes -->
                                            <div class="space-y-3">
                                                <div class="flex items-start">
                                                    <div class="flex items-center h-5">
                                                        <input id="is-new"
                                                               type="checkbox"
                                                               @bind="newItem.IsNew"
                                                               class="focus:ring-primary-500 h-4 w-4 text-primary-600 border-gray-300 dark:border-gray-600 dark:bg-gray-700 rounded" />
                                                    </div>
                                                    <div class="ml-3 text-sm">
                                                        <label for="is-new" class="font-medium text-gray-700 dark:text-gray-300">@L["IsNew"]</label>
                                                    </div>
                                                </div>

                                                <div class="flex items-start">
                                                    <div class="flex items-center h-5">
                                                        <input id="is-hazmat"
                                                               type="checkbox"
                                                               @bind="newItem.IsHazmat"
                                                               class="focus:ring-primary-500 h-4 w-4 text-primary-600 border-gray-300 dark:border-gray-600 dark:bg-gray-700 rounded" />
                                                    </div>
                                                    <div class="ml-3 text-sm">
                                                        <label for="is-hazmat" class="font-medium text-gray-700 dark:text-gray-300">@L["IsHazmat"]</label>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>

                                        <div>
                                            <!-- Weight -->
                                            <div class="mb-4">
                                                <label for="weight" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                                                    @L["Weight"]
                                                </label>
                                                <div class="mt-1 flex items-center">
                                                    <div class="flex-grow">
                                                        <input type="number"
                                                               id="weight"
                                                               @bind="newItem.Weight"
                                                               min="0"
                                                               step="0.1"
                                                               class="shadow-sm focus:ring-primary-500 focus:border-primary-500 block w-full sm:text-sm border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md" />
                                                    </div>
                                                    <span class="ml-2 text-sm text-gray-500 dark:text-gray-400">@L["Pounds"]</span>
                                                </div>
                                                <div class="mt-1 flex items-center">
                                                    <div class="flex items-center h-5">
                                                        <input id="is-weight-total"
                                                               type="checkbox"
                                                               @bind="newItem.IsWeightTotal"
                                                               class="focus:ring-primary-500 h-4 w-4 text-primary-600 border-gray-300 dark:border-gray-600 dark:bg-gray-700 rounded" />
                                                    </div>
                                                    <div class="ml-3 text-sm">
                                                        <label for="is-weight-total" class="font-medium text-gray-700 dark:text-gray-300">@L["IsWeightTotal"]</label>
                                                    </div>
                                                </div>
                                            </div>

                                            <!-- Dimensions -->
                                            <div class="mb-4">
                                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                                                    @L["Dimensions"]
                                                </label>
                                                <div class="mt-1 grid grid-cols-3 gap-2">
                                                    <div>
                                                        <input type="number"
                                                               @bind="newItem.Length"
                                                               min="0"
                                                               step="0.1"
                                                               placeholder="@L["Length"]"
                                                               class="shadow-sm focus:ring-primary-500 focus:border-primary-500 block w-full sm:text-sm border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md" />
                                                    </div>
                                                    <div>
                                                        <input type="number"
                                                               @bind="newItem.Width"
                                                               min="0"
                                                               step="0.1"
                                                               placeholder="@L["Width"]"
                                                               class="shadow-sm focus:ring-primary-500 focus:border-primary-500 block w-full sm:text-sm border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md" />
                                                    </div>
                                                    <div>
                                                        <input type="number"
                                                               @bind="newItem.Height"
                                                               min="0"
                                                               step="0.1"
                                                               placeholder="@L["Height"]"
                                                               class="shadow-sm focus:ring-primary-500 focus:border-primary-500 block w-full sm:text-sm border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md" />
                                                    </div>
                                                </div>
                                            </div>

                                            <!-- Declared Value -->
                                            <div>
                                                <label for="declared-value" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                                                    @L["DeclaredValue"]
                                                </label>
                                                <div class="mt-1 relative rounded-md shadow-sm">
                                                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                                        <span class="text-gray-500 dark:text-gray-400 sm:text-sm">$</span>
                                                    </div>
                                                    <input type="number"
                                                           id="declared-value"
                                                           @bind="newItem.DeclaredValue"
                                                           min="0"
                                                           step="0.01"
                                                           class="focus:ring-primary-500 focus:border-primary-500 block w-full pl-7 sm:text-sm border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md" />
                                                </div>
                                                <div class="mt-1 flex items-center">
                                                    <div class="flex items-center h-5">
                                                        <input id="is-value-total"
                                                               type="checkbox"
                                                               @bind="newItem.IsValueTotal"
                                                               class="focus:ring-primary-500 h-4 w-4 text-primary-600 border-gray-300 dark:border-gray-600 dark:bg-gray-700 rounded" />
                                                    </div>
                                                    <div class="ml-3 text-sm">
                                                        <label for="is-value-total" class="font-medium text-gray-700 dark:text-gray-300">@L["IsValueTotal"]</label>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    </div>

                                    <!-- Description -->
                                    <div>
                                        <label for="description" class="block text-sm font-medium text-gray-700 dark:text-gray-300">
                                            @L["Description"]
                                        </label>
                                        <div class="mt-1">
                                            <textarea id="description"
                                                      @bind="newItem.Description"
                                                      rows="2"
                                                      class="shadow-sm focus:ring-primary-500 focus:border-primary-500 block w-full sm:text-sm border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md"
                                                      placeholder="@L["DescriptionPlaceholder"]"></textarea>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
            <div class="bg-gray-50 dark:bg-gray-700 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse border-t border-gray-200 dark:border-gray-600">
                <button type="button"
                        @onclick="AddItemAsync"
                        class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-primary-600 text-base font-medium text-white hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 sm:ml-3 sm:w-auto sm:text-sm"
                        disabled="@isLoading">
                    @if (isLoading)
                    {
                        <div class="inline-block h-4 w-4 animate-spin rounded-full border-2 border-solid border-current border-r-transparent mr-2"></div>
                        @L["Processing"]
                    }
                    else
                    {
                        <svg class="-ml-1 mr-2 h-5 w-5" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                            <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd" />
                        </svg>
                        @L["AddItem"]
                    }
                </button>
                <button type="button"
                        @onclick="OnCancel"
                        class="mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 dark:border-gray-600 shadow-sm px-4 py-2 bg-white dark:bg-gray-700 text-base font-medium text-gray-700 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 sm:mt-0 sm:ml-3 sm:w-auto sm:text-sm">
                    @L["Cancel"]
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public int MudanzaId { get; set; }
    [Parameter] public string UserId { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public EventCallback OnItemAdded { get; set; }

    private bool isLoading = false;
    private string loadingMessage = "";

    private MudanzaItem newItem = new()
        {
            IsNew = false,
            Quantity = 1,
            Category = "Furniture",
            IsWeightTotal = false,
            IsValueTotal = false,
            Weight = 0,
            DeclaredValue = 0
        };

    // Método público para mostrar el modal
    public void ShowModal()
    {
        JSRuntime.InvokeVoidAsync("openModal", "addItemModal");
    }

    private async Task AddItemAsync()
    {
        // Validación básica
        if (string.IsNullOrWhiteSpace(newItem.Name))
        {
            ToastService.Warning(L["ItemNameRequired"]);
            return;
        }

        if (newItem.Quantity <= 0)
        {
            ToastService.Warning(L["QuantityInvalid"]);
            return;
        }

        try
        {
            isLoading = true;
            loadingMessage = L["SavingItem"];

            newItem.MudanzaId = MudanzaId;
            newItem.CreatedBy = UserId;
            newItem.CreatedAt = DateTime.UtcNow;

            var result = await MudanzaService.AddItemAsync(newItem, UserId);

            if (result != null)
            {
                ToastService.Success(L["ItemAddedSuccess"]);
                await OnItemAdded.InvokeAsync();

                // Reset form for next item
                newItem = new()
                    {
                        IsNew = false,
                        Quantity = 1,
                        Category = "Furniture",
                        IsWeightTotal = false,
                        IsValueTotal = false,
                        Weight = 0,
                        DeclaredValue = 0
                    };

                await JSRuntime.InvokeVoidAsync("closeModal", "addItemModal");
                await OnClose.InvokeAsync();
            }
            else
            {
                ToastService.Error(L["ErrorAddingItem"]);
            }
        }
        catch (Exception ex)
        {
            ToastService.Error(L["ErrorAddingItem"]);
            Console.Error.WriteLine($"Error adding item: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task OnCancel()
    {
        await JSRuntime.InvokeVoidAsync("closeModal", "addItemModal");
        await OnClose.InvokeAsync();
    }
}