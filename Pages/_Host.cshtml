@* MudanzaApp/Pages/_Host.cshtml *@
@page "/"
@using Microsoft.AspNetCore.Components.Web
@namespace MudanzaApp.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="~/" />

    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css" integrity="sha384-rbsA2VBKQhggwzxH7pPCaAqO46MgnOM80zW1RWuH61DGLwZJEdK2Kadq2F9CUG65" crossorigin="anonymous">

    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v6.4.0/css/all.css">

    <!-- App CSS -->
    <link href="css/site.css" rel="stylesheet" />
    <link href="MudanzaApp.styles.css" rel="stylesheet" />

    <!-- Favicon -->
    <link rel="icon" type="image/png" href="favicon.png" />

    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />
</head>
<body>
    <component type="typeof(App)" render-mode="ServerPrerendered" />

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    <!-- QR Code generator script -->
    <script src="https://cdn.jsdelivr.net/npm/qrcode@1.5.1/build/qrcode.min.js"></script>

    <!-- Blazor script -->
    <script src="_framework/blazor.server.js"></script>

    <!-- Bootstrap script -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-kenU1KFdBIe4zVF0s0G1M5b4hcpxyD9F7jL+jjXkk+Q2h455rYXK/7HAuoJl+0I4" crossorigin="anonymous"></script>

    <!-- Custom JavaScript -->
    <script src="js/site.js"></script>

    <script>
        // QR Code generator function
        window.generateQRCode = (elementId, text) => {
            const element = document.getElementById(elementId);
            if (element) {
                QRCode.toCanvas(element, text, { width: 200 }, function (error) {
                    if (error) console.error(error);
                });
                return true;
            }
            return false;
        };

        // Clipboard copy function
        window.copyToClipboard = (text) => {
            navigator.clipboard.writeText(text)
                .then(() => true)
                .catch(() => false);
        };

        // Function to detect if the app is running on a mobile device
        window.isMobileDevice = () => {
            return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
        };

        // Function to detect browser language
        window.getBrowserLanguage = () => {
            return navigator.language || navigator.userLanguage;
        };

        // Function to open camera
        window.openCamera = async (inputElementId) => {
            const inputElement = document.getElementById(inputElementId);
            if (!inputElement) return false;

            // Check if the device has a camera
            if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
                try {
                    // Create a container for the camera preview
                    let previewId = inputElementId + "_preview";
                    let previewElement = document.getElementById(previewId);

                    if (!previewElement) {
                        previewElement = document.createElement("video");
                        previewElement.id = previewId;
                        previewElement.style.width = "100%";
                        previewElement.style.maxWidth = "400px";
                        previewElement.style.border = "1px solid #ccc";
                        previewElement.autoplay = true;

                        inputElement.parentNode.insertBefore(previewElement, inputElement.nextSibling);
                    }

                    // Get the camera stream
                    const stream = await navigator.mediaDevices.getUserMedia({ video: true });
                    previewElement.srcObject = stream;

                    // Create capture button
                    let captureButtonId = inputElementId + "_capture";
                    let captureButton = document.getElementById(captureButtonId);

                    if (!captureButton) {
                        captureButton = document.createElement("button");
                        captureButton.id = captureButtonId;
                        captureButton.className = "btn btn-primary mt-2";
                        captureButton.innerHTML = "Capture Photo";

                        previewElement.parentNode.insertBefore(captureButton, previewElement.nextSibling);
                    }

                    // Handle capture button click
                    captureButton.onclick = () => {
                        // Create a canvas to capture the image
                        const canvas = document.createElement("canvas");
                        canvas.width = previewElement.videoWidth;
                        canvas.height = previewElement.videoHeight;

                        // Draw the video frame to the canvas
                        const context = canvas.getContext("2d");
                        context.drawImage(previewElement, 0, 0, canvas.width, canvas.height);

                        // Convert canvas to file
                        canvas.toBlob((blob) => {
                            // Create a File object
                            const file = new File([blob], "captured_image.jpg", { type: "image/jpeg" });

                            // Create a FileList-like object
                            const dataTransfer = new DataTransfer();
                            dataTransfer.items.add(file);

                            // Set the file to the input element
                            inputElement.files = dataTransfer.files;

                            // Trigger change event
                            const event = new Event("change", { bubbles: true });
                            inputElement.dispatchEvent(event);

                            // Clean up
                            stream.getTracks().forEach(track => track.stop());
                            previewElement.remove();
                            captureButton.remove();
                        }, "image/jpeg", 0.9);
                    };

                    return true;
                } catch (error) {
                    console.error("Error accessing camera:", error);
                    return false;
                }
            } else {
                return false;
            }
        };
    </script>
</body>
</html>