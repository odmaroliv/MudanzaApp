@page "/"
@using Microsoft.AspNetCore.Components.Web
@namespace MudanzaApp.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

<!DOCTYPE html>
<html lang="en" class="h-full bg-gray-50">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="~/" />

    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>

    <!-- Configure Tailwind theme -->
    <script>
        tailwind.config = {
            theme: {
                extend: {
                    colors: {
                        primary: {
                            50: '#f0f9ff',
                            100: '#e0f2fe',
                            200: '#bae6fd',
                            300: '#7dd3fc',
                            400: '#38bdf8',
                            500: '#0ea5e9',
                            600: '#0284c7',
                            700: '#0369a1',
                            800: '#075985',
                            900: '#0c4a6e',
                            950: '#082f49',
                        },
                        secondary: {
                            50: '#f8fafc',
                            100: '#f1f5f9',
                            200: '#e2e8f0',
                            300: '#cbd5e1',
                            400: '#94a3b8',
                            500: '#64748b',
                            600: '#475569',
                            700: '#334155',
                            800: '#1e293b',
                            900: '#0f172a',
                            950: '#020617',
                        },
                    },
                    fontFamily: {
                        sans: ['Inter var', 'sans-serif'],
                    },
                },
            },
            plugins: [
                function ({ addVariant }) {
                    addVariant('child', '& > *');
                    addVariant('child-hover', '& > *:hover');
                }
            ],
        };
    </script>

    <!-- Inter Font -->
    <link rel="stylesheet" href="https://rsms.me/inter/inter.css">

    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

    <!-- App CSS -->
    <link href="css/tailwind-site.css" rel="stylesheet" />

    <!-- Favicon -->
    <link rel="icon" type="image/png" href="favicon.png" />

    <component type="typeof(HeadOutlet)" render-mode="ServerPrerendered" />
</head>
<body class="h-full">
    <component type="typeof(App)" render-mode="ServerPrerendered" />

    <div id="blazor-error-ui" class="fixed inset-x-0 bottom-0 hidden p-4 z-50 bg-amber-50 border-t border-amber-200 shadow-lg">
        <environment include="Staging,Production">
            <div class="container mx-auto flex items-center justify-between">
                <p class="text-amber-800">An error has occurred. This application may no longer respond until reloaded.</p>
                <div>
                    <a href="" class="text-sm font-semibold bg-amber-100 px-3 py-1 rounded text-amber-800 hover:bg-amber-200">Reload</a>
                    <a class="text-amber-800 cursor-pointer ml-2 hover:text-amber-900" onclick="document.getElementById('blazor-error-ui').style.display = 'none';">×</a>
                </div>
            </div>
        </environment>
        <environment include="Development">
            <div class="container mx-auto flex items-center justify-between">
                <p class="text-amber-800">An unhandled exception has occurred. See browser dev tools for details.</p>
                <div>
                    <a href="" class="text-sm font-semibold bg-amber-100 px-3 py-1 rounded text-amber-800 hover:bg-amber-200">Reload</a>
                    <a class="text-amber-800 cursor-pointer ml-2 hover:text-amber-900" onclick="document.getElementById('blazor-error-ui').style.display = 'none';">×</a>
                </div>
            </div>
        </environment>
    </div>

    <!-- QR Code generator script -->
    <script src="https://cdn.jsdelivr.net/npm/qrcode@1.5.1/build/qrcode.min.js"></script>

    <!-- Blazor script -->
    <script src="_framework/blazor.server.js"></script>

    <!-- Custom JavaScript -->
    <script src="js/site.js"></script>

    <script>
        // QR Code generator function
        window.generateQRCode = (elementId, text) => {
            const element = document.getElementById(elementId);
            if (element) {
                QRCode.toCanvas(element, text, { width: 200 }, function (error) {
                    if (error) console.error(error);
                });
                return true;
            }
            return false;
        };

        // Clipboard copy function
        window.copyToClipboard = (text) => {
            navigator.clipboard.writeText(text)
                .then(() => true)
                .catch(() => false);
        };

        // Function to detect if the app is running on a mobile device
        window.isMobileDevice = () => {
            return /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
        };

        // Function to detect browser language
        window.getBrowserLanguage = () => {
            return navigator.language || navigator.userLanguage;
        };

        // Modal functionality
        window.openModal = (id) => {
            document.getElementById(id).classList.remove('hidden');
            document.getElementById(id).setAttribute('aria-hidden', 'false');
            document.body.classList.add('overflow-hidden');
        };

        window.closeModal = (id) => {
            document.getElementById(id).classList.add('hidden');
            document.getElementById(id).setAttribute('aria-hidden', 'true');
            document.body.classList.remove('overflow-hidden');
        };

        // Function to open camera
        window.openCamera = async (inputElementId) => {
            const inputElement = document.getElementById(inputElementId);
            if (!inputElement) return false;

            // Check if the device has a camera
            if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
                try {
                    // Create a container for the camera preview
                    let previewId = inputElementId + "_preview";
                    let previewElement = document.getElementById(previewId);

                    if (!previewElement) {
                        previewElement = document.createElement("video");
                        previewElement.id = previewId;
                        previewElement.className = "w-full max-w-md border border-gray-300 rounded-lg";
                        previewElement.autoplay = true;

                        inputElement.parentNode.insertBefore(previewElement, inputElement.nextSibling);
                    }

                    // Get the camera stream
                    const stream = await navigator.mediaDevices.getUserMedia({ video: true });
                    previewElement.srcObject = stream;

                    // Create capture button
                    let captureButtonId = inputElementId + "_capture";
                    let captureButton = document.getElementById(captureButtonId);

                    if (!captureButton) {
                        captureButton = document.createElement("button");
                        captureButton.id = captureButtonId;
                        captureButton.className = "mt-2 px-4 py-2 bg-primary-600 text-white rounded-lg hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2";
                        captureButton.innerHTML = "Capture Photo";

                        previewElement.parentNode.insertBefore(captureButton, previewElement.nextSibling);
                    }

                    // Handle capture button click
                    captureButton.onclick = () => {
                        // Create a canvas to capture the image
                        const canvas = document.createElement("canvas");
                        canvas.width = previewElement.videoWidth;
                        canvas.height = previewElement.videoHeight;

                        // Draw the video frame to the canvas
                        const context = canvas.getContext("2d");
                        context.drawImage(previewElement, 0, 0, canvas.width, canvas.height);

                        // Convert canvas to file
                        canvas.toBlob((blob) => {
                            // Create a File object
                            const file = new File([blob], "captured_image.jpg", { type: "image/jpeg" });

                            // Create a FileList-like object
                            const dataTransfer = new DataTransfer();
                            dataTransfer.items.add(file);

                            // Set the file to the input element
                            inputElement.files = dataTransfer.files;

                            // Trigger change event
                            const event = new Event("change", { bubbles: true });
                            inputElement.dispatchEvent(event);

                            // Clean up
                            stream.getTracks().forEach(track => track.stop());
                            previewElement.remove();
                            captureButton.remove();
                        }, "image/jpeg", 0.9);
                    };

                    return true;
                } catch (error) {
                    console.error("Error accessing camera:", error);
                    return false;
                }
            } else {
                return false;
            }
        };
    </script>
</body>
</html>